rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function hasUser(uid) { return exists(/databases/$(database)/documents/users/$(uid)); }
  function userRole(uid) { return hasUser(uid) ? get(/databases/$(database)/documents/users/$(uid)).data.role : null; }
  function isPlatform(uid) { return hasUser(uid) && (get(/databases/$(database)/documents/users/$(uid)).data.isPlatformAdmin == true || userRole(uid) == 'platform'); }
    function isAdmin(uid) { return userRole(uid) == 'admin'; }
    function isEditor(uid) { return userRole(uid) == 'editor'; }
    function userTenant(uid) {
      return hasUser(uid) && get(/databases/$(database)/documents/users/$(uid)).data.tenantId != null
        ? get(/databases/$(database)/documents/users/$(uid)).data.tenantId
        : 'default';
    }
    function sameTenant(resTenant, uid) { return !(resource.data.keys().hasAny(['tenantId'])) || resTenant == userTenant(uid); }
    function sameTenantReq(reqTenant, uid) { return !(request.resource.data.keys().hasAny(['tenantId'])) || reqTenant == userTenant(uid); }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId || // self
        isPlatform(request.auth.uid) || // platform can read all
        (isAdmin(request.auth.uid) && resource.data.tenantId == userTenant(request.auth.uid)) // tenant admin same tenant
      );
      // Create: self-initialization OR platform admin creating any OR tenant admin creating within own tenant
      allow create: if request.auth != null && (
        (request.auth.uid == userId && request.resource.data.tenantId == userTenant(request.auth.uid)) ||
        (isPlatform(request.auth.uid)) ||
        (isAdmin(request.auth.uid) && request.resource.data.tenantId == userTenant(request.auth.uid))
      );
      // Update: user editing limited fields OR tenant admin same tenant OR platform admin
      allow update: if request.auth != null && (
        (request.auth.uid == userId && request.resource.data.tenantId == resource.data.tenantId) ||
        (isAdmin(request.auth.uid) && resource.data.tenantId == userTenant(request.auth.uid)) ||
        isPlatform(request.auth.uid)
      );
      allow delete: if request.auth != null && (
        isPlatform(request.auth.uid) || (isAdmin(request.auth.uid) && resource.data.tenantId == userTenant(request.auth.uid))
      );
    }

    // Tenants collection (companies)
    match /tenants/{tenantId} {
      allow read: if request.auth != null && (
        isPlatform(request.auth.uid) || tenantId == userTenant(request.auth.uid)
      );
      allow list: if request.auth != null && isPlatform(request.auth.uid);
      allow create: if request.auth != null && isPlatform(request.auth.uid);
      allow update, delete: if request.auth != null && isPlatform(request.auth.uid);
    }
    
    // Files collection - role-based access
    match /files/{fileId} {
      allow read: if request.auth != null && sameTenant(resource.data.tenantId, request.auth.uid);
      allow create: if request.auth != null && userRole(request.auth.uid) in ['user','editor','admin'] && sameTenantReq(request.resource.data.tenantId, request.auth.uid);
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid) && sameTenant(resource.data.tenantId, request.auth.uid);
      allow update: if request.auth != null && resource.data.uploadedByUid == request.auth.uid && sameTenant(resource.data.tenantId, request.auth.uid) && request.resource.data.diff(resource.data).changedKeys().hasOnly(['tags','updatedAt']);
      allow update: if request.auth != null && isEditor(request.auth.uid) && sameTenant(resource.data.tenantId, request.auth.uid) && request.resource.data.diff(resource.data).changedKeys().hasOnly(['tags','updatedAt']);
    }
    
    // Requests collection - users can create and read their own, admins can read/update all
    match /requests/{requestId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requestedBy && sameTenantReq(request.resource.data.tenantId, request.auth.uid);
      allow read: if request.auth != null && sameTenant(resource.data.tenantId, request.auth.uid) && (request.auth.uid == resource.data.requestedBy || isAdmin(request.auth.uid));
      allow update: if request.auth != null && isAdmin(request.auth.uid) && sameTenant(resource.data.tenantId, request.auth.uid);
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requestedBy && sameTenantReq(request.resource.data.tenantId, request.auth.uid);
      allow read: if request.auth != null && sameTenant(resource.data.tenantId, request.auth.uid) && (request.auth.uid == resource.data.requestedBy || isAdmin(request.auth.uid));
      allow update: if request.auth != null && isAdmin(request.auth.uid) && sameTenant(resource.data.tenantId, request.auth.uid);
    }

    // Global folder metadata (labels: tags + color)
    match /folders_meta/{docId} {
      allow read: if request.auth != null && ( !(resource.data.keys().hasAny(['tenantId'])) || resource.data.tenantId == userTenant(request.auth.uid) );
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid) && sameTenantReq(request.resource.data.tenantId, request.auth.uid);
    }

    // Tags Catalog (keys and suggestion values)
    match /tags_catalog/{keyId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Per-user favorites subcollection
    match /users/{userId}/favorites/{favId} {
      // Owner can read/list their own favorites
      allow read: if request.auth != null && request.auth.uid == userId;
      // Owner can manage their own favorites
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}